plugins {
    id 'idea'
    id 'java-library'
    id 'maven-publish'
    id 'net.neoforged.moddev' version '2.0.115'
    id 'net.darkhax.curseforgegradle' version '1.1.28'
    id 'com.modrinth.minotaur' version "2.+"
}

version = "${version}"
group = "${mod_group}"
base {
    archivesName = "${mod_archive_name}-${mc_version}"
}

// Mojang ships Java 21 to end users in 1.20.5+, so your mod should target Java 21.
java.toolchain.languageVersion = JavaLanguageVersion.of(21)

neoForge {
    // Specify the version of NeoForge to use.
    version = project.neo_version

    parchment {
        mappingsVersion = "${parchment_mappings_version}"
        minecraftVersion = "${parchment_minecraft_version}"
    }

    // This line is optional. Access Transformers are automatically detected
    // accessTransformers = project.files('src/main/resources/META-INF/accesstransformer.cfg')

    // Default run configurations.
    // These can be tweaked, removed, or duplicated as needed.
    runs {
        client {
            client()

            // Comma-separated list of namespaces to load gametests from. Empty = all namespaces.
            systemProperty 'neoforge.enabledGameTestNamespaces', "${mod_id}"
        }

        server {
            server()
            programArgument '--nogui'
            systemProperty 'neoforge.enabledGameTestNamespaces', "${mod_id}"
        }

        data {
            data()

            // example of overriding the workingDirectory set in configureEach above, uncomment if you want to use it
            // gameDirectory = project.file('run-data')

            // Specify the modid for data generation, where to output the resulting resource, and where to look for existing resources.
            programArguments.addAll '--mod', "${mod_id}", '--all', '--output', file('src/generated/resources/').getAbsolutePath(), '--existing', file('src/main/resources/').getAbsolutePath()
        }

        // applies to all the run configs above
        configureEach {
            // Recommended logging data for a userdev environment
            // The markers can be added/remove as needed separated by commas.
            // "SCAN": For mods scan.
            // "REGISTRIES": For firing of registry events.
            // "REGISTRYDUMP": For getting the contents of all registries.
            systemProperty 'forge.logging.markers', 'REGISTRIES'

            if (javaToolchains.launcherFor(java.toolchain).map { it.metadata.vendor }.getOrElse('').contains('JetBrains')) {
                jvmArguments.addAll('-XX:+IgnoreUnrecognizedVMOptions', '-XX:+AllowEnhancedClassRedefinition')
            }

            jvmArgument '-Xmx4G'

            // Recommended logging level for the console
            // You can set various levels here.
            // Please read: https://stackoverflow.com/questions/2031163/when-to-use-the-different-log-levels
            logLevel = org.slf4j.event.Level.DEBUG
        }
    }

    mods {
        // define mod <-> source bindings
        // these are used to tell the game which sources are for which mod
        // multi mod projects should define one per mod
        "${mod_id}" {
            sourceSet(sourceSets.main)
        }
    }
}
// Include resources generated by data generators.
sourceSets.main.resources { srcDir 'src/generated/resources' }

// Sets up a dependency configuration called 'localRuntime'.
// This configuration should be used instead of 'runtimeOnly' to declare
// a dependency that will be present for runtime testing but that is
// "optional", meaning it will not be pulled by dependents of this mod.
configurations {
    runtimeClasspath.extendsFrom localRuntime
}

repositories {
    maven {
        url = "https://maven.blamejared.com"
    }
}

dependencies {
    implementation "net.neoforged:neoforge:${neo_version}"

    compileOnly "mezz.jei:jei-${jei_minecraft}-common-api:${jei_version}"
    compileOnly "mezz.jei:jei-${jei_minecraft}-neoforge-api:${jei_version}"

    localRuntime "mezz.jei:jei-${jei_minecraft}-neoforge:${jei_version}"
}

jar {
    manifest {
        attributes([
                "Specification-Title"     : "${mod_id}",
                "Specification-Vendor"    : "Mrbysco",
                "Specification-Version"   : "1", // We are version 1 of ourselves
                "Implementation-Title"    : project.name,
                "Implementation-Version"  : project.jar.archiveVersion,
                "Implementation-Vendor"   : "Mrbysco",
                "Implementation-Timestamp": new Date().format("yyyy-MM-dd'T'HH:mm:ssZ")
        ])
    }
}

publishing {
    publications {
        register('mavenJava', MavenPublication) {
            groupId project.group
            artifactId base.archivesName.get()
            version project.version
            from components.java
        }
    }
    repositories {
        if (System.getenv().SAP_SECRET) {
            maven {
                url "https://maven.saps.dev/releases"
                credentials {
                    username = "mrbysco"
                    password = "${System.getenv().SAP_SECRET}"
                }
            }
        }
    }
}

if (System.getenv().CURSEFORGE_KEY) {
    task curseforge(type: net.darkhax.curseforgegradle.TaskPublishCurseForge) {
        apiToken = System.getenv().CURSEFORGE_KEY

        def mainFile = upload(project.curseforge_id, jar)
        mainFile.releaseType = 'beta'
        mainFile.addModLoader("NeoForge")
        mainFile.addGameVersion("${mc_version}")
        mainFile.addJavaVersion("Java 21")
        mainFile.addEnvironment('Server', 'Client')

        mainFile.changelog = file("$project.rootDir/changelog.md")
        mainFile.changelogType = 'markdown'

//        mainFile.addRequirement()
//        mainFile.addOptional()
    }
}

if (System.getenv().MODRINTH_KEY) {
    modrinth {
        token = System.getenv().MODRINTH_KEY
        projectId = project.modrinth_id
        versionType = "beta"
        versionName = "${mod_name} ${mc_version}"
        versionNumber = project.version
        uploadFile = jar
        changelog = file("$project.rootDir/changelog.md").text
        gameVersions = ["${mc_version}"]
        loaders = ["neoforge"]

        dependencies {

        }
    }
}

tasks.withType(JavaCompile).configureEach {
    options.encoding = 'UTF-8' // Use the UTF-8 charset for Java compilation
}

// IDEA no longer automatically downloads sources/javadoc jars for dependencies, so we need to explicitly enable the behavior.
idea {
    module {
        downloadSources = true
        downloadJavadoc = true
    }
}